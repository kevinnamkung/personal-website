---
const items = [
  {
    title: "Experience",
    content: [
      {
        name: "SWE - Capital One",
        url: "/about",
        image: "/images/cap1swe.png"
      },
      {
        name: "SWE Intern - Capital One",
        url: "/about",
        image: "/images/cap1intern.png"
      },
      {
        name: "SWE Intern - General Atomics",
        url: "https://ga.com",
        image: "/images/gaintern.png"
      }
    ],
  },
  {
    title: "Projects",
    content: [
      {
        name: "Spotify Top Hits Predictor",
        url: "https://example.com",
        image: "/images/spotifypredict.png"
      },
    ],
  },
  {
    title: "Certifications",
    content: [
      {
        name: "AWS Solutions Architect",
        url: "https://example.com",
        image: "/images/awsSA.png"
      },
    ],
  },
];

const defaultImage = items[0].content[0].image;
---

<style>
  
  .container {
    display: flex;
    justify-content: center;
    align-items: flex-start;
    gap: 100px;
    max-width: 1200px;
    margin-left: 20vw;
    margin-top: 50px;
  }

  .dropdown {
    width: 250%;
    max-width: 400px;
    margin-right: -20px;
  }

  .dropdown-item {
    padding: 10px;
    cursor: pointer;
    background-color: #E6E6E6;
    transition: background 0.2s;
    font-family: 'Karla', sans-serif;
    font-weight: normal;
    border-bottom: 1px solid #ccc;
  }

  .dropdown-item:hover {
    background-color: #e0e0e0;
  }

  .dropdown-content {
    display: none;
    padding: 10px;
    background: #E6E6E6;
    margin-top: 10px; /* Default margin between dropdown item and content */
    transition: margin-top 0.2s, opacity 0.3s; 
    opacity: 0; /* Initially hidden */
    max-height: 0; /* Start with 0 height */
    overflow: hidden; /* Ensure it doesn't overflow when collapsed */
  }

  .dropdown-content.active {
    display: block;
    margin-top: 0; 
    opacity: 1;
    max-height: 300px; /* Adjust this value to suit your content size */
  }

  .dropdown-content ul {
    list-style: none;
    padding-left: 1;
    margin: 0;
  }

   /* Style each item with padding, border, and background */
   .dropdown-content li {
    margin-bottom: 10px;
    background-color: #E6E6E6;
    border-radius: 5px;
    transition: background 0.3s;
  }

  .dropdown-content li.active-item {
    background-color: #e0e0e0; 
  }

  .dropdown-content li:hover {
    background-color: #e0e0e0;
  }

  /* Add link styles */
  .dropdown-content a {
    text-decoration: none;
    color: #343434;
    font-size: clamp(1rem, 2vw, 1rem); /* Adjust subtitle size */
  }

  .dropdown-content a:hover {
    text-decoration: underline;
  }

  .image-container {
    flex-shrink: 0;
    max-width: 600px;
    max-height: 600px;
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: 10px;
    transition: background-color 0.3s ease, transform 0.3s ease, box-shadow 0.3s ease;
    cursor: pointer; /* Indicates it's clickable */
    width: 400%;
  }

  .image-container:hover {
    background-color: #dcdcdc;
    transform: scale(1.05); /* Slightly enlarges the image */
    box-shadow: 0px 10px 20px rgba(0, 0, 0, 0.3); /* Adds a shadow for depth */
  }

  .image-container img {
    width: 200%;
    height: auto;
    border-radius: 0px;
    transition: opacity 0.3s ease-in-out, transform 0.3s ease-in-out;
    opacity: 1;
  }

  .image-container img.fade-out {
    opacity: 0;
    transform: scale(0.95); /* Slight shrink effect when changing */
  }

</style>

<section class="container">
  <!-- Dropdown Section -->
  <div class="dropdown">
    {items.map((item, index) => (
      <div>
        <div class="dropdown-item" id={`dropdown-toggle-${index}`}>
          {item.title}
        </div>
        <div class="dropdown-content" id={`dropdown-${index}`}>
          <ul>
            {item.content.map((entry, idx) => (
              <li>
                <a href={entry.url} target="_blank" data-image={entry.image}>{entry.name}</a>
              </li>
            ))}
          </ul>
        </div>
      </div>
    ))}
  </div>

  <!-- Image Display -->
  <div class="image-container">
    <a id="image-link" href="#" target="_blank"></a>
      <img id="display-image" src={defaultImage} alt="Experience Image">
    </a>
  </div>
</section>

<script>
  document.addEventListener('DOMContentLoaded', function () {
    const dropdownItems = document.querySelectorAll('.dropdown-item');
    const imageContainer = document.getElementById('display-image');
    const dropdownLinks = document.querySelectorAll('.dropdown-content a');

    // Set the default active image
    const defaultActiveItem = document.querySelector('.dropdown-content a[data-image]');
    if (defaultActiveItem) {
      defaultActiveItem.parentElement.classList.add('active-item'); // Highlight first item
      imageContainer.src = defaultActiveItem.getAttribute('data-image');
      imageContainer.setAttribute('data-url', defaultActiveItem.href); // Store URL in the image
    }

    // Ensure the first dropdown (Experience) is expanded
    const firstDropdown = document.getElementById('dropdown-0');
    if (firstDropdown) {
      firstDropdown.classList.add('active');
    }
    
    // dropdown
    dropdownItems.forEach((item, index) => {
      item.addEventListener('click', function() {
        const content = document.getElementById(`dropdown-${index}`);

        // Close any other open dropdowns
        document.querySelectorAll('.dropdown-content').forEach((item, i) => {
          if (item !== content) {
            item.classList.remove('active');
          }
        });

        if (content) {
          content.classList.toggle('active');
        }
      });
    });

    // Make the image clickable
    imageContainer.addEventListener('click', function () {
      const linkUrl = imageContainer.getAttribute('data-url');
      if (linkUrl) {
        window.location.href = linkUrl;
      }
    });

    // Handle image and highlight the corresponding dropdown item
    dropdownLinks.forEach((link) => {
      link.addEventListener('click', (event) => {
        event.preventDefault(); // Prevent default link behavior

        // Update image
        const target = event.currentTarget;
        const imageSrc = target.getAttribute('data-image');

        if (imageContainer && imageSrc) {
          // Add fade-out effect
          imageContainer.classList.add("fade-out");

          setTimeout(() => {
            imageContainer.src = imageSrc;
            imageContainer.setAttribute("data-url", target.href);
            imageContainer.classList.remove("fade-out"); // Remove fade-out after change
          }, 300); // Match CSS transition duration

        }

        // Remove active-item class from all list items
        document.querySelectorAll('.dropdown-content li').forEach((li) => {
          li.classList.remove('active-item');
        });

        // Highlight the clicked item
        target.parentElement.classList.add('active-item');
      });
    });
  });
</script>
